name: "Ingest text files from S3"
assets:
  - name: "eduwise-keyspace"
    asset-type: "astra-keyspace"
    creation-mode: create-if-not-exists
    config:
      keyspace: "eduwise_default"
      datasource: "AstraDatasource"
  - name: "documents-table"
    asset-type: "cassandra-table"
    creation-mode: create-if-not-exists
    config:
      table-name: "documents"
      keyspace: "eduwise_default"
      datasource: "AstraDatasource"
      create-statements:
        - >
          CREATE TABLE IF NOT EXISTS eduwise_default.documents(  
            filename TEXT,
            chunk_id int,
            text TEXT,
            embeddings_vector VECTOR<FLOAT, 1536>,
            PRIMARY KEY (filename, chunk_id)
            );
        - >
          CREATE CUSTOM INDEX IF NOT EXISTS eduwise_index 
          ON eduwise_default.documents(embeddings_vector) USING 'StorageAttachedIndex';
pipeline:
  - name: "Read from S3"
    type: "s3-source"
    configuration:
      bucketName: "${secrets.s3.bucket-name}"
      endpoint: "${secrets.s3.endpoint}"
      access-key: "${secrets.s3.access-key}"
      secret-key: "${secrets.s3.secret}"
      region: "${secrets.s3.region}"
      idle-time: 5
  - name: "Extract text"
    type: "text-extractor"
  - name: "Normalise text"
    type: "text-normaliser"
    configuration:
      make-lowercase: true
      trim-spaces: true
  - name: "Split into chunks"
    type: "text-splitter"
    configuration:
      splitter_type: "RecursiveCharacterTextSplitter"
      chunk_size: 400
      separators: ["\n\n", "\n", " ", ""]
      keep_separator: false
      chunk_overlap: 100
      length_function: "cl100k_base"
  - name: "Convert to structured data"
    type: "document-to-json"
    configuration:
      text-field: text
      copy-properties: true
  - name: "prepare-structure"
    type: "compute"
    configuration:
      fields:
        - name: "value.filename"
          expression: "properties.name"
          type: STRING
        - name: "value.chunk_id"
          expression: "properties.chunk_id"
          type: STRING
  - name: "compute-embeddings"
    type: "compute-ai-embeddings"
    configuration:
      model: "text-embedding-ada-002"
      embeddings-field: "value.embeddings_vector"
      text: "{{ value.text }}"
      batch-size: 10
      flush-interval: 500
  - name: "Write to Astra DB"
    type: "vector-db-sink"
    configuration:
      datasource: "AstraDatasource"
      table-name: "documents"
      keyspace: "eduwise_default"
      mapping: "filename=value.filename, chunk_id=value.chunk_id, text=value.text, embeddings_vector=value.embeddings_vector"