// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?           @unique
  hashedPassword   String?
  emailVerified    DateTime?
  role             String?           @default("user") // user, admin
  image            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  moodleCredential MoodleCredential?
  openai           OpenAi?
  accounts         Account[]
  sessions         Session[]
  courses          Course[]          @relation("UserCourse")
  chats            Chat[]            @relation("UserChat")
  messages         Message[]         @relation("UserMessage")
}

model MoodleCredential {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  token     String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model OpenAi {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @unique @db.ObjectId
  apiKey            String
  apiOrganizationId String
  model             String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model Course {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  moodleCourseId String?
  shortname      String
  fullname       String
  summary        String
  origin         String  @default("custom") // moodle or custom
  chats          Chat[] //1-n relation with chat
  userId         String  @map("userId") @db.ObjectId
  systemPrompt   String
  student        User    @relation("UserCourse", fields: [userId], references: [id])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userTitle String?
  autoTitle String?
  chatModel String
  createdAt DateTime
  updatedAt DateTime?
  courseId  String    @db.ObjectId
  userId    String    @db.ObjectId
  student   User      @relation("UserChat", fields: [userId], references: [id])
  course    Course    @relation(fields: [courseId], references: [id]) //n-1 relation with course
  messages  Message[] // 1-n relation with message
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String    @db.ObjectId
  text      String
  model     String?
  typing    Boolean   @default(false)
  createdAt DateTime
  updatedAt DateTime?
  userId    String    @db.ObjectId
  student   User      @relation("UserMessage", fields: [userId], references: [id])
  sender    String    @default("You") //You or Bot
  role      String    @default("user") // user, assistent, system
  chat      Chat      @relation(fields: [chatId], references: [id]) //n-1 with chat
}
